                          //CLASE 16

//

                           //CLASE 16

                    //FRAMEWORKS & NODE JS

//NODE JS

//Es un entorno adicional de ejecuci√≥n para Javascript. Es un programa que permite ejecutar c√≥digo JavaScript por fuera del navegador. Con √©l podemos construir desde aplicaciones de l√≠nea de comandos (consola) hasta servidores HTTP para potenciar aplicaciones web.

/* ---------------------------------------------------------------------- */

//Backend con NodeJS

//Al trabajar en el back no disponemos de la UI del navegador para ir testeando los resultados. La principal herramienta para esto es la consola cli (command line interface). 
//Con ella podemos ejecutar nuestro programa en el servidor, ver los logs que generamos, visualizar errores y mensajes informativos expl√≠citamente generados por Javascript en tiempo de ejecuci√≥n dentro del contexto del programa del servidor ü§©.

/* ---------------------------------------------------------------------- */

//NPM

//Es un repositorio de m√≥dulos de Node. Muchos de esos programas que incorporamos a nuestros proyectos est√°n escritos como paquetes, o m√≥dulos, de Node. En el repositorio NPM se listan y alojan para descargarlos e integrarlos a las APPs de forma sencilla üôå
/* 
-el comando NPM nos permite acceder a este repositorio y administrar estos paquetes
-el comando NPM install nos permite instalar cualquier modulo disponible en este repositorio.
*/

/* ---------------------------------------------------------------------- */

//SPA

//Una SPA (Simple Page Application), o aplicaci√≥n de una sola p√°gina, es una web app que consiste de un √∫nico archivo html que se carga al ingresar al sitio, y el resto de la navegaci√≥n y cambios de p√°gina se da mediante modificaci√≥n din√°mica del DOM con Javascript.
//Una SPA tiene el prop√≥sito de brindar una experiencia m√°s fluida al usuario, mejorando la performance y velocidad üë§. ¬øDe qu√© manera hace esto? üôÄ En ella, todos los c√≥digos de HTML, JavaScript, y CSS se cargan una sola vez‚Äã o los recursos necesarios se cargan din√°micamente cuando lo requiera la p√°gina, normalmente como respuesta a las acciones del usuario.

/* ---------------------------------------------------------------------- */

//ENTREGA DEL PROYECTO FINAL

/* 
Objetivos espec√≠ficos:
-Contar con una estructura de datos clara, basada en Arrays y Objetos.
-Utilizar funciones, condicionales e iteradores para manipular los datos de la app.
-Generar y manipular el DOM. Crear vistas a partir de datos de la app y generar eventos para responder a la interacci√≥n del usuario. Utilizar alguna -librer√≠a relevante para el simulador.
-Utilizar asincron√≠a y fetch para cargar datos est√°ticos o consumir una API.

El proyecto final debe incluir:
-Objetos y Arrays. M√©todos de Arrays.
-Funciones y condicionales.
-Generaci√≥n del DOM de forma din√°mica. Eventos.
-Sintaxis avanzada.
-Al menos una librer√≠a de uso relevante para el proyecto.
-Manejo de promesas con fetch. 
-Carga de datos desde un JSON local o desde una API externa.

*/

/* ---------------------------------------------------------------------- */
