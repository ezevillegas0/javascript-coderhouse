                          //CLASE 15

                          //AJAX  & Fetch

//¬øQU√â ES AJAX?

//En los 2000, los/as desarrolladores/as web se encontraban ante el constante desaf√≠o de obtener o enviar informaci√≥n sin afectar el estado actual de la p√°gina (sin requerir una recarga completa refresco de la p√°gina) ü§¶‚Äç‚ôÄÔ∏è. Para dar respuesta a este problema, surgi√≥ AJAX (JavaScript As√≠ncrono y XML), un conjunto de t√©cnicas de desarrollo que permiten que las aplicaciones web funcionen de forma asincr√≥nica para procesar tareas en segundo plano ü§π‚Äç‚ôÇÔ∏è.

//En consecuencia, cualquier app o web que emplee AJAX puede enviar y recibir datos sin volver a cargar toda la p√°gina, evitando la interrupci√≥n de acciones realizadas por el usuario, a√±adiendo interactividad y dinamismo a nuestra aplicaci√≥n.

/* ---------------------------------------------------------------------- */

                         //COMUNICACI√ìN CON EL SERVIDOR

//Repasemos el funcionamiento de una aplicaci√≥n web üß†. Se accede a las mismas mediante conexi√≥n a internet, empleando un navegador y referenciando la direcci√≥n web del sitio(domino). El dominio est√° asociado a un servidor, es decir, un ordenador que tiene la aplicaci√≥n web (el servidor aloja la aplicaci√≥n web). Cuando carga el sitio, el usuario visualiza la parte frontal de la aplicaci√≥n llamada front-end o lado del cliente, con la que puede interactuar üíª.

/* ---------------------------------------------------------------------- */

                           //PETICIONES HTTP

//El mecanismo por el cual se piden y proveen datos a trav√©s de internet es HTTP (Hypertext Transfer Protocol). 
//Cuando emitimos una orden al navegador, hace una petici√≥n (o request) HTTP a alg√∫n servidor. Luego, la recibir√°, procesar√° y nos devolver√° una respuesta con informaci√≥n que utilizaremos en la aplicaci√≥n üåê.

/* 
Estas peticiones que debemos hacer est√°n definidas por varias partes:
-Una URL o direcci√≥n.
-Un m√©todo (GET, POST, PUT, DELETE).
-Headers.
-Body.
-Par√°metros (Query Params o URL Params).
*/

/* ------------------ */

//URL

//Cuando nos comunicamos con un servidor para pedir informaci√≥n lo hacemos a trav√©s de una URL, ya que √©ste es un programa alojado en alg√∫n host y nos comunicamos con √©l a trav√©s de la direcci√≥n correcta. 

/* ------------------ */

//M√âTODO

//Cada petici√≥n que hacemos est√° acompa√±ada por un verbo que indica al servidor cu√°l es nuestra intenci√≥n üéØ. El servidor tiene la capacidad de escuchar distintas peticiones en la misma URL, decidir a cu√°l responder y c√≥mo. Son 4 los verbos m√°s utilizados, aunque hay muchos m√°s: Get, Post, Put & Delete.

/* 
GET: Para obtener informaci√≥n (o recurso) del servidor. Suelen ser las m√°s utilizadas.
POST: Para enviar informaci√≥n al servidor para crear alg√∫n recurso.
PUT: Para crear o modificar alg√∫n recurso en el servidor.
DELETE: Para eliminar alg√∫n recurso en el servidor.
*/

//Las peticiones de tipo POST y PUT van acompa√±adas de un body (cuerpo de la request) donde se definen los datos o informaci√≥n a enviar al servidor. GET o DELETE, por su parte, no tienen body ya que no necesitan enviar datos adjuntos.

/* ------------------ */

//BODY

//es el espacio en la petici√≥n donde se definen los datos a enviar al servidor üì®.

/* ------------------ */

//HEADERS

//Las cabeceras (headers) HTTP permiten al cliente y servidor enviar informaci√≥n sobre la petici√≥n y la respuesta. Los headers incluyen informaci√≥n sobre la petici√≥n para establecer una transferencia segura y clara, y de ser necesario se pueden modificar para agregar datos adicionales üìÉ. 
//üöß No debemos confundir  informaci√≥n sobre la petici√≥n (headers) con los datos que la petici√≥n puede transferir (body).

/* ------------------ */

//PAR√ÅMETROS

/* 
Para especificar una petici√≥n, se puede enviar informaci√≥n adicional en la forma de par√°metros a trav√©s de la URL. Tenemos dos formas de definir par√°metros a trav√©s de la URL:
-Query params
-URL params
*/

/* ------------------ */

//Query params

//Esta sintaxis permite adjuntar en la URL una serie de par√°metros en la forma de pares clave-valor. Por ejemplo, si queremos buscar algo por google, debemos enviarle un valor de b√∫squeda por el par√°metro q, a trav√©s de la url.
//Se utiliza el s√≠mbolo ? para indicar el final de la parte de la direcci√≥n de la url y el comienzo del query. A partir de all√≠, se escriben par√°metros con la forma clave=valor, pudiendo definir varios separ√°ndolos con el signo ampersand (&).

//or ejemplo, en la siguiente URL se hace una consulta a la PokeApi (https://pokeapi.co/docs/v2), pidiendo informaci√≥n al endpoint de /pokemon, y se env√≠an los par√°metros offset=0 y limit=20 :
//    https://pokeapi.co/api/v2/pokemon?offset=0&limit=20
//Esto condiciona la b√∫squeda que queremos hacer en ese servidor.

/* ------------------ */

//URL params

//Esta sintaxis permite enviar par√°metros directamente en la forma de segmentos de la URL, es decir separados por / . Por ejemplo, la PokeApi nos indica lo siguiente: 
//    https://pokeapi.co/api/v2/pokemon/{id or name}/
//Significa que ese {id or name} es un par√°metro, un valor din√°mico que insertamos en la URL, en este caso para obtener informaci√≥n sobre un pokemon seg√∫n su ID o nombre. Para obtener aquel con id = 1, har√≠amos una petici√≥n GET a la siguiente url: https://pokeapi.co/api/v2/pokemon/1

/* -------------------------------------------------------------------- */

                                   //ESTADOS DE PETICI√ìN

//en la pesta√±a Network de las herramientas de desarrollador podemos ver todas las peticiones realizadas por el navegador üë®‚Äçüíª. Por ejemplo, al solicitar acceso a alg√∫n sitio web, el navegador realiza numerosas peticiones tipo GET para obtener recursos del servidor en cuesti√≥n. 

//Estas peticiones proporcionan todos los archivos necesarios para montar la p√°gina en el browser (html, css, scripts, im√°genes, etc.) y con eso poder visualizar la aplicaci√≥n correctamente üôå.

/* 
Cada petici√≥n tiene un Status, un c√≥digo que significa el estado de la petici√≥n:
-Los c√≥digos de estado que comienzan en 2 (generalmente 200), significa que la petici√≥n fue exitosa ü§©.
-Los c√≥digos que empiezan con 4 significan que hubo alg√∫n error con la petici√≥n. El famoso 404 indica que el recurso buscado no fue encontrado ‚ùå.
-C√≥digos que empiezan con 5 significan que hubo un error con el servidor, por lo tanto no deviene de un error en la petici√≥n ‚ùå.
*/

/* ---------------------------------------------------------------------- */

                                        //API

//Una API (Application Programming Interfaces) es una aplicaci√≥n web construida en base a la arquitectura API REST, a la cual podemos solicitar y enviar informaci√≥n desde el cliente. Generalmente, nos comunicamos con aplicaciones de este tipo y es la tendencia actual de desarrollo.

//Hay muchas APIs disponibles que podemos utilizar para acceder a distintos recursos √∫tiles para nuestra aplicaci√≥n üëâ Servicios de contenido (CMS), Plataformas de pago, Servicios de e-mail, etc√©tera. Incluso hay APIs creadas como bancos de informaci√≥n sobre series y videojuegos populares, como la PokeApi (Documentation - Pok√©API) o Star Wars API (SWAPI). 

//Una API suele tener una URL base (el dominio donde est√° alojada la aplicaci√≥n) y luego puede tener varios endpoints, es decir, distintas secciones a las que podemos acceder. A la vez, se pueden hacer peticiones con distintos m√©todos al mismo endpoint y obtener distintos resultados.

//Generalmente, similar a cuando queremos incorporar una librer√≠a, al momento de consumir una API debemos revisar su documentaci√≥n. All√≠ se definen los distintos endpoints disponibles, los m√©todos a utilizar para hacer una petici√≥n y qu√© se nos ofrecer√° en respuesta üìÑ.

/* ---------------------------------------------------------------------- */

                                     //FETCH

//Javascript nos ofrece el m√©todo fetch() para hacer peticiones HTTP a alg√∫n servicio externo. Como estas peticiones son asincr√≥nicas, convenientemente el m√©todo fetch() trabaja con promesas. El m√©todo recibe un primer par√°metro que es la URL a la cual hacer la petici√≥n, y un segundo par√°metro opcional de configuraci√≥n:

fetch(url, config)

//Para los siguientes ejemplos utilizaremos la API de JSON Placeholder, dise√±ada para hacer pruebas de peticiones simulando un listado de posts.
//Por defecto el m√©todo fetch hace peticiones del tipo GET. Seg√∫n la documentaci√≥n, para obtener una lista de posts debemos hacer una petici√≥n del siguiente tipo.

//Vayamos por parte para entender este proceso. Primero, llamemos al m√©todo con la URL correspondiente y veamos qu√© retorna:

console.log( fetch('https://jsonplaceholder.typicode.com/posts') )
// Promise {<pending>}

//Retorna una Promesa pendiente. Para trabajar con la resoluci√≥n de la petici√≥n, debemos hacerlo dentro del .then() correspondiente:

fetch('https://jsonplaceholder.typicode.com/posts')
    .then( (resp) => console.log(resp) 
)

//Haciendo console.log de la respuesta, no vemos el listado de posts que esperamos sino un objeto del tipo Response.

/* ---------------------------------------------------------------------- */

                                  //RESPONSE

//üìû Llamar a fetch() retorna una promesa que resuelve en un objeto Response que contiene informaci√≥n sobre la respuesta del servidor, como su c√≥digo de estado y headers. Para acceder al contenido de la respuesta debemos dar un paso adicional, y por eso es que se ven dos .then() concatenados.

//Generalmente, se transfieren datos en formato JSON. Por lo tanto, para obtener el contenido de la respuesta debemos aplicar el m√©todo .json() a ese objeto. √âste retorna a su vez una Promesa, por lo que capturamos su contenido (los datos enviados por la API) en un segundo .then() :
fetch('https://jsonplaceholder.typicode.com/posts')
    .then( (resp) => resp.json() )
    .then( (data) => {
        console.log(data)
}   )

//En el par√°metro data tenemos el contenido de la respuesta de nuestra petici√≥n. En este caso, la API nos responde con un array de 100 elemento donde cada elemento es un post.

/* ---------------------------------------------------------------------- */

                           //ANALIZANDO RESPUESTAS

//rabajar con APIs nos ofrece un entorno claro sobre c√≥mo comunicarnos y obtener respuestas con recursos ??. Sin embargo, cada API define qu√© responder, qu√© formato darle a los datos que env√≠a y c√≥mo estructurarlos. Por lo tanto, siempre debemos analizar las respuestas obtenidas para ver qu√© datos utilizar de ellas ü§î.

//Cada elemento tiene propiedades body, id, title, userId. Estamos trabajando con el par√°metro data definido que es un array de objetos. Por ello, podemos recorrerlo y acceder a sus objetos y propiedades üßê:

fetch('https://jsonplaceholder.typicode.com/posts')
    .then( (resp) => resp.json() )
    .then( (data) => {
        console.log( data[0].title )
        console.log( data[0].body )
}   )

//eniendo esto disponible dentro del .then(), ¬°podemos volcarlo al DOM utilizando los m√©todos vistos previamente! ü§©
/* 
<h2>Posts!</h2>
    <hr/>

    <ul id="listado">
    </ul>
*/

//Al obtener la respuesta de la API, recorremos el array obtenido y agregamos a la <ul> un elemento <li> con el contenido de cada post en el array. 

/* 
// JS
const lista = document.querySelector('#listado')

fetch('https://jsonplaceholder.typicode.com/posts')
    .then( (resp) => resp.json() )
    .then( (data) => {
       
        data.forEach((post) => {
            const li = document.createElement('li')
            li.innerHTML = `
                <h4>${post.title}</h4>
                <p>${post.body}</p>
            `
            lista.append(li)
        })
    })
*/

/* ---------------------------------------------------------------------- */

                        //ENVIANDO DATOS CON POST

//La API de JSON Placeholder tambi√©n nos permite simular peticiones POST, es decir, podemos hacer una petici√≥n para enviar datos a la API. Al ser una simulaci√≥n, no se crean recursos realmente en el servidor, pero s√≠ obtenemos una respuesta aceptando el POST.
//Dijimos que el segundo par√°metro del m√©todo fetch es un objeto de configuraci√≥n. En √©ste podemos definir el m√©todo, los headers y el body de la petici√≥n. Si bien fetch trae valores por defecto para esto (como el m√©todo que es GET), podemos modificarlo a discreci√≥n seg√∫n sea necesario üòä.

//En este caso la documentaci√≥n nos indica que para hacer un post debemos hacer un fetch con las siguientes caracter√≠sticas:

/* 
fetch('https://jsonplaceholder.typicode.com/posts', {
        method: 'POST',
        body: JSON.stringify({
            title: 'Coderhouse',
            body: 'Post de prueba',
            userId: 1,
        }),
        headers: {
            'Content-type': 'application/json; charset=UTF-8',
        },
    })
    .then((response) => response.json())
    .then((data) => console.log(data))
*/

/* 
En el objeto de configuraci√≥n tenemos varias propiedades a definir:
-method: ‚ÄòPOST‚Äô. Significa que el m√©todo de la petici√≥n ser√° POST üöß Si no lo modificamos ser√° de tipo GET por defecto.
-headers: En este caso se agrega una propiedad ‚ÄòContent-type‚Äô, con el valor que nos indica la documentaci√≥n de la API üöß Si no se agrega la petici√≥n ser√≠a rechazada por el servidor.
-body: Aqu√≠ se adjuntan los datos a enviar al servidor. En este caso se env√≠a un objeto con la forma { title, body, userId }. El body debe enviarse en formato JSON, por eso lo vemos envuelto en un JSON.stringify().
*/

/* ---------------------------------------------------------------------- */

                           //RUTAS RELATIVAS

//Si la URL utilizada no contiene el prefijo ‚Äòhttps:‚Äô, la ruta es relativa. As√≠, podemos hacer una petici√≥n a alg√∫n archivo local en formato JSON usando fetch. Por ejemplo, creemos un archivo data.json que simule un array de productos:

// data.json
[
    {"nombre": "Producto 1", "precio": 1500, "id": 1},
    {"nombre": "Producto 2", "precio": 2500, "id": 2},
    {"nombre": "Producto 3", "precio": 3500, "id": 3},
    {"nombre": "Producto 4", "precio": 4500, "id": 4},
    {"nombre": "Producto 5", "precio": 5500, "id": 5}
]

//N√≥tese que debe estar escrito con el formato json v√°lido. Ahora al momento de cargar la aplicaci√≥n, podemos llamar a este archivo con fetch y generar una vista de forma asincr√≥nica:

/* 
const lista = document.querySelector('#listado')

fetch('/data.json')
    .then( (res) => res.json())
    .then( (data) => {

        data.forEach((producto) => {
            const li = document.createElement('li')
            li.innerHTML = `
                <h4>${producto.nombre}</h4>
                <p>${producto.precio}</p>
                <p>C√≥digo: ${producto.id}</p>
                <hr/>
            `
   
            lista.append(li)
        })
    })

//Al ser un archivo local la respuesta es casi inmediata, pero sigue siendo un proceso asincr√≥nico ü§Ø
*/

/* ---------------------------------------------------------------------- */

                               //ASYNC - AWAIT

//Trabajar con promesas facilita mucho el control de los procesos asincr√≥nicos ü§π‚Äç‚ôÄÔ∏è Sin embargo, en procesos extensos se puede dificultar el trabajo escribiendo todo dentro de varios .then(). Por suerte, los desarrolladores de JS ya pensaron en esto y nos ofrecen una herramienta que nos permite trabajar las promesas como si escribi√©ramos c√≥digo sincr√≥nico üòé: async await.

//El m√©todo fetch retorna una promesa. De forma sincr√≥nica, si guardamos esta promesa en una variable veremos la promesa pendiente, porque esto sucede sincr√≥nicamente:
/* 
const resp = fetch('https://jsonplaceholder.typicode.com/posts')
console.log(resp) // Promise {<pending>}
*/
//Significa que el console.log() no espera a que se resuelva la promesa de la l√≠nea anterior para ejecutarse.

//La sentencia await nos permite establecer un punto de espera en el c√≥digo. Aplicado como prefijo a una promesa (en este caso, el return del fetch) se bloquea la ejecuci√≥n de la siguiente instrucci√≥n hasta que la promesa se resuelva üòé. As√≠, agregando esta sentencia podemos ver que ahora en la variable vemos el objeto Response, o sea la promesa resuelta:

const resp = await fetch('https://jsonplaceholder.typicode.com/posts')
console.log(resp) // Response

//Pero await s√≥lo puede utilizarse dentro de una funci√≥n asincr√≥nica üòï. Aqu√≠ es donde entra la sentencia async. √âsta palabra reservada sirve para declarar una funci√≥n como asincr√≥nica, y se agrega como prefijo a la funci√≥n üëè:

async function pedirPosts() { }
// o bien
const pedirPosts = async () => { }

//As√≠, dentro de una funci√≥n async podemos utilizar la sentencia await vista previamente. Esto nos permite esperar a que se resuelvan las promesas vistas para continuar con la instrucci√≥n siguiente. 

//El resultado es una sintaxis que se asemeja a la escritura sincr√≥nica tradicional. Obtenemos el mismo resultado que antes, pero con una sintaxis m√°s clara üëå El async-await funcionan de la mano. Recordamos que es una herramienta adicional que puede facilitar la escritura, no es una obligaci√≥n.

/* 
const pedirPosts = async () => {
    const resp = await fetch('https://jsonplaceholder.typicode.com/posts')
    const data = await resp.json()
   
    data.forEach((post) => {
        const li = document.createElement('li')
        li.innerHTML = `
            <h4>${post.title}</h4>
            <p>${post.body}</p>
        `
        lista.append(li)
    })
}

pedirPosts()
*/


/* ---------------------------------------------------------------------- */
